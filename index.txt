<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="utf-8" />
  <title>Demo Firestore — Lưu thật</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    body{font-family:system-ui,Segoe UI,Roboto,Arial;margin:24px}
    input{margin:4px}
    ul{padding-left:0}
    li{list-style:none;margin:8px 0}
    button{margin-left:8px}
  </style>
</head>
<body>
  <h1>Demo Firestore (CRUD)</h1>

  <div>
    <input id="name" placeholder="Tên (vd: Nguyen Van A)">
    <input id="score" placeholder="Điểm (số)" type="number">
    <button id="saveBtn">Lưu</button>
  </div>

  <h2>Danh sách (từ Firestore)</h2>
  <ul id="list"></ul>

  <script type="module">
    // --- IMPORTS (CDN modular SDK)
    // Thay '9.x.y' bằng version lines Firebase console cho bạn nếu muốn; ví dụ 9.6.1
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.x.y/firebase-app.js";
    import {
      getFirestore, collection, addDoc, onSnapshot,
      doc, updateDoc, deleteDoc, serverTimestamp, query, orderBy
    } from "https://www.gstatic.com/firebasejs/9.x.y/firebase-firestore.js";
    import { getAuth, signInAnonymously, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.x.y/firebase-auth.js";

    // --- CONFIG: dán config của bạn copy từ Firebase Console (Your apps -> SDK config)
   const firebaseConfig = {
  apiKey: "AIzaSyA3Mx6r2xlgmyGlpTJPJ2GF9QjCTiubwGI",
  authDomain: "greedyking-e9b52.firebaseapp.com",
  databaseURL: "https://greedyking-e9b52-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "greedyking-e9b52",
  storageBucket: "greedyking-e9b52.firebasestorage.app",
  messagingSenderId: "243722854826",
  appId: "1:243722854826:web:4f69620095fd1fc9934bd3",
  measurementId: "G-5PMYYPCDC3"
};

    // --- INIT
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const auth = getAuth();

    // (Tùy chọn) đăng nhập ẩn danh để bạn có request.auth != null
    // Bật Anonymous sign-in trong Firebase Console > Authentication > Sign-in method
    signInAnonymously(auth).catch(e => console.error("Auth error:", e));

    // --- UI elements
    const nameEl = document.getElementById('name');
    const scoreEl = document.getElementById('score');
    const saveBtn = document.getElementById('saveBtn');
    const listEl = document.getElementById('list');

    // --- COLLECTION REF
    const colRef = collection(db, "users");

    // --- SAVE (CREATE)
    saveBtn.addEventListener('click', async () => {
      const name = nameEl.value.trim();
      const score = parseInt(scoreEl.value) || 0;
      if (!name) return alert('Nhập tên');
      try {
        await addDoc(colRef, {
          name,
          score,
          createdAt: serverTimestamp()
        });
        nameEl.value = '';
        scoreEl.value = '';
      } catch (err) {
        console.error("Lỗi khi lưu:", err);
        alert('Lưu lỗi, kiểm tra console');
      }
    });

    // --- READ realtime (LISTENER)
    // Sắp xếp theo createdAt để các bản ghi mới hiện lên cuối (hoặc đổi theo ý bạn)
    const q = query(colRef, orderBy('createdAt'));
    onSnapshot(q, (snapshot) => {
      listEl.innerHTML = '';
      snapshot.forEach(docSnap => {
        const data = docSnap.data();
        const li = document.createElement('li');
        li.innerHTML = `
          <strong>${data.name || '[no name]'}</strong>
          — ${data.score ?? 0}
          <button data-id="${docSnap.id}" class="edit">Sửa</button>
          <button data-id="${docSnap.id}" class="del">Xóa</button>
        `;
        listEl.appendChild(li);
      });

      // attach handlers (đơn giản)
      document.querySelectorAll('.edit').forEach(btn => {
        btn.onclick = async (e) => {
          const id = e.target.dataset.id;
          const newScore = prompt('Nhập điểm mới:');
          if (newScore === null) return;
          try {
            const docRef = doc(db, 'users', id);
            await updateDoc(docRef, { score: parseInt(newScore) });
          } catch (err) { console.error(err); alert('Update lỗi'); }
        };
      });
      document.querySelectorAll('.del').forEach(btn => {
        btn.onclick = async (e) => {
          const id = e.target.dataset.id;
          if (!confirm('Xác nhận xóa?')) return;
          try {
            const docRef = doc(db, 'users', id);
            await deleteDoc(docRef);
          } catch (err) { console.error(err); alert('Xóa lỗi'); }
        };
      });
    }, (err) => {
      console.error("Listener error:", err);
      alert('Không thể đọc dữ liệu (kiểm tra rules & config)');
    });

    // --- optional: show auth state for debug
    onAuthStateChanged(auth, user => {
      console.log('Auth state changed. user=', user?.uid ?? null);
    });

  </script>
</body>
</html>
